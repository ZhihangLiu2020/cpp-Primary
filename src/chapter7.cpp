/*
函数

函数原型：就是函数头加分号，只需要提供参数类型即可（作占位符），不必有函数名。
    例如： int add(int,int);
函数定义：就是函数的实现
    例如： int add(int a,int b)
          {
              return a+b;
          }
参数传递：c++通常按值传参，也就是函数使用的是原参数的一个副本进行运算。（包括int，string等）
    但是当参数是数组时，传递的实际上就是地址，因为数组名本身就是指针。
    所以对数组参数进行地址传递时，不必加引用符号，因为本身就是在愿数组进行操作。
    ！但是对string参数进行地址传递时，要使用引用符&
    ！对array参数也一样要引用，否则就是值传递
    想要防止修改原数组，可以在参数前加 const

    一般，将数组作为参数时，还要添加一个参数作为数组的长度。

指针和const：
    常量指针：指向常量（const）的指针（对于这个指针来说，这个值是常量不可修改，并不一定要求被指向的对象是常量）
    int age=20;
    const int *p=&age;//p是指向 const int 的一个指针，const int类型是不可修改的，因此不能通过p来修改这个值（而不是那个值不可修改）。
    age=21；//但是可以直接修改，因为age不是真正的常量

    常量指针：指针本身是常量（注意指针本身内容是地址），也就是那个地址是固定的，无法修改，所以指向是固定的。

递归：
    每层递归都要创建自己的变量，所以递归层数太多，会导致栈空间用尽！

函数指针：
    存储函数的地址，就是存储函数机器语言代码的内存的开始位置。
    函数名就是函数的地址,例如think()函数，
    process(think);//把think()函数的地址作为参数。它允许process()函数在内部调用think()函数
    process(think());//把think()函数的返回值作为参数。这样会首先调用think()函数，然后把返回值作为参数给process()函数
    
    声明函数指针：
        假如函数原型为：double cacl(int);
        则声明函数指针：double (*p)(int); 也就是把函数名用(*p)代替，p就成为指向函数的指针
        就可以用指针指向函数：p=cacl;
    用函数指针调用函数的时候，可以有2种写法：
        p(2);//函数名是指向函数的指针，那么指向函数的指针应该和函数名行为相似
        (*p)(2);//p是函数指针，*p就是函数

*/
